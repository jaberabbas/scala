[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\j\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\j\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Oracle Corporation Java 17.0.10)
[debug] Load.defaultLoad until apply took 172.4321ms
[debug]           Load.loadUnit: plugins took 115.43ms
[debug]           Load.loadUnit: defsScala took 0.5702ms
[debug] [Loading] Scanning directory C:\Users\j\workspace\scala\Base64Encoding\project
[debug]             Load.loadUnit: mkEval took 8.347ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\j\workspace\scala\Base64Encoding\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.4358 ms
[info] loading settings for project base64encoding-build from idea.sbt ...
[debug]               Load.resolveProject(base64encoding-build) took 44.8995ms
[debug]             Load.loadTransitive: finalizeProject(Project(id base64encoding-build, base: C:\Users\j\workspace\scala\Base64Encoding\project, plugins: List(<none>))) took 98.0508ms
[debug] [Loading] Done in C:\Users\j\workspace\scala\Base64Encoding\project, returning: (base64encoding-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 410.7321ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9266ms
[debug]         Load.loadUnit(file:/C:/Users/j/workspace/scala/Base64Encoding/project/, ...) took 543.3278ms
[debug]       Load.apply: load took 692.0042ms
[debug]       Load.apply: resolveProjects took 6.7037ms
[debug]       Load.apply: finalTransforms took 67.6076ms
[debug]       Load.apply: config.delegates took 8.21ms
[debug]       Load.apply: Def.make(settings)... took 519.4296ms
[debug]       Load.apply: structureIndex took 125.3952ms
[debug]       Load.apply: mkStreams took 2.3618ms
[info] loading project definition from C:\Users\j\workspace\scala\Base64Encoding\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2690.4997ms
[debug]     Load.loadUnit: defsScala took 0.0064ms
[debug] [Loading] Scanning directory C:\Users\j\workspace\scala\Base64Encoding
[debug]       Load.loadUnit: mkEval took 0.3063ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.0877 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 50.3078ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\j\workspace\scala\Base64Encoding, plugins: List(<none>))) took 56.4516ms
[debug] [Loading] Done in C:\Users\j\workspace\scala\Base64Encoding, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 137.0334ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.7771ms
[debug]   Load.loadUnit(file:/C:/Users/j/workspace/scala/Base64Encoding/, ...) took 2843.492ms
[debug] Load.apply: load took 2876.4343ms
[debug] Load.apply: resolveProjects took 0.1969ms
[debug] Load.apply: finalTransforms took 63.814ms
[debug] Load.apply: config.delegates took 0.6521ms
[debug] Load.apply: Def.make(settings)... took 167.3999ms
[debug] Load.apply: structureIndex took 82.6232ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to Base64Encoding (in build file:/C:/Users/j/workspace/scala/Base64Encoding/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64115 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64115, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by no settings or tasks.
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by no settings or tasks.
[info] Reapplying settings...
[info] set current project to Base64Encoding (in build file:/C:/Users/j/workspace/scala/Base64Encoding/)
[debug] > Exec(idea-shell, None, None)
